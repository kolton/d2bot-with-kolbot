// D2BotChannel starter can join friend-list announcements as well as channel bot announcements

var gameMaxLength				= 900;    	// seconds
var gameMinLength				= 50000;	// time in milliseconds, minimum game length, 180 seconds default (1 game/3 minutes)
var unableToConnectRetry		= 5;		// time in minutes to retry connecting on connection fail (real value is +/- 1 min)
var realmDownRetry				= 3;		// time in minutes to retry connecting on a realm down (default is 300 minutes)
var disconnectedRetry			= 5;		// time in minutes to retry on a disconnection (usually ip ban related)
var cdkeyInUseRetry				= 2;		// time in minutes to retry on a cdkey in use error message (set to 0 to stop)
var connectingToBnetTimeout		= 20000;	// time in milliseconds to wait for a login to time out and click cancel and retry
var characterScreenTimeout		= 10000;	// time in milliseconds to wait for character screen to appear
var pleaseWaitTimeout			= 10000;	// time in milliseconds to wait for a please wait popup
var createGameThreshold			= 5000;		// time in milliseconds to wait between making games
var createGameThresholdRandom	= 0;		// time in milliseconds to randomly add +/- to the game create time
var createGameTimeout			= 5000;		// time in milliseconds to register a failed to create game
var waitInLineTimeout			= 60000;	// time in milliseconds to wait in lines for a create game (60 second default)
var clickdelay					= 500;		// wait X milliseconds before next action after a click event
var textdelay					= 500;		// wait X milliseconds before next action after inserting text into a textbox
var clickdelayRandom			= 500;		// random amount of time to add to a click
var textdelayRandom				= 500;		// random amount of time to add to a text set
var gameDoesNotExistdelayMin	= 3000;	// how long to wait when a Game Does Not Exist occurs - minimum - default 10 minutes
var gameDoesNotExistdelayMax	= 3000;	// how long to wait when a Game Does Not Exist occurs - maximum - default 15 minutes
var gameDoesNotExistTimeout		= 0;	// how long to wait for the dialog to disappear (default 30 seconds, don't change this)
var waitInChatBeforeActionsMin	= 1000;		// min how long to wait before joining channel
var waitInChatBeforeActionsMax	= 2000;		// max how long to wait before joining channel

var switchKeys = false;
var switchKeyDelay = 0; // time in seconds to delay before switching keys

var joinChannel = "";
var games = [];
var passwords = [];
var joinDelay = 1000;
var friendListQuery = 10; // time in seconds between each "/f l" query. 0 = don't use "/f l"

// DONT EDIT ANYTHING BELOW THIS

// D2BOT Console Command
const D2BOT_JOIN = 1;
const D2BOT_GAMEINFO = 2;
const D2BOT_REQUESTGAME = 3; 

var lastGameStatus = "ready";
var nextGameMake = 0;
var inGameAt = 0;
var chatActionsDone = false;
var lastGameFailed = false;
var ConnectFail = false;

include("json2.js");
include("OOG.js");

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

var gameCount = DataFile.getStats().runs + 1;
var gamePass = "";
var gameName = "";
var oldGame = "";
var gameStart;
var isUp = "no"; 
var channelTick = new Date().getTime();
var _ingame = false; 
var retry = 0;
var fListTick = 0;

function main() {
	//addEventListener('copydata', RecieveCopyData);
	delay(rand(1, 2) * 1000);
	//D2Bot.requestGameInfo();

	while (true) {
		while (me.ingame) { // returns true before actually in game so we can't only use this check
			if (me.gameReady) { // returns false when switching acts so we can't use while
				isUp = "yes"; 

				if (!_ingame) {
					if (me.gamepassword.toLowerCase() !== gamePass.toLowerCase()) {
						print("leaving game"); 
						quit();
					}

					print("Updating Status"); 
					D2Bot.updateStatus("Game: " + me.gamename);

					oldGame = me.gamename
					lastGameStatus = "ingame";
					_ingame = true;
					gameStart = new Date().getTime();
					me.maxgametime = gameMaxLength * 1000;
					
					DataFile.updateStats("runs", gameCount);
				}
			}

			delay(1000);
		}

		isUp = "no";

		locationAction(getLocation());
		delay(1000);
	}
}

function locationAction(location) {
MainSwitch: switch (location) {
	case 0:
		break;
	case 1:	// Lobby
		D2Bot.updateStatus("Lobby");
		ControlAction.click(6,27,480,120,20);

		break;
	case 2: // Waiting In Line
		D2Bot.updateStatus("Waiting...");
		locationTimeout(waitInLineTimeout, location);

		break;
	case 3: // Lobby Chat
		D2Bot.updateStatus("Lobby Chat"); 

		if (_ingame) {
			print("updating runs"); 
			D2Bot.updateRuns();

			gameCount += 1;
			lastGameStatus = "ready";
			_ingame = false;
			retry = 0;
		}

		if (!chatActionsDone || new Date().getTime() - channelTick >= 120e3) {
			chatActionsDone = true;
			channelTick = new Date().getTime();

			if (joinChannel) {
				delay(rand(waitInChatBeforeActionsMin, waitInChatBeforeActionsMax));
				say("/j " + joinChannel);
				delay(500);
			}
		}
		
		if (friendListQuery > 0 && new Date().getTime() - fListTick >= friendListQuery * 1000) {
			say("/f l");

			fListTick = new Date().getTime();
		}

		if (lastGameStatus === "pending") {
			retry += 1;

			print("game joining failed " + retry);
		}

		if (retry >= 3) {
			print("reset game");

			lastGameStatus = "ready";
			oldGame = gameName;
			retry = 0;
		}

		var i, n, regex,
			fullText = "",
			lines = ControlAction.getText(4,28,410,354,298);

		if (!lines) {
			break;
		}

		fullText = lines.join(" ").replace(/\s+/g, " ");

MainLoop: for (n = 0; n < games.length; n += 1) {
			regex = new RegExp("\\W*" + games[n].toLowerCase() + "\\d*", "gi");

			gameName = fullText.match(regex);

			if (gameName) {
				gameName = gameName[gameName.length - 1].toString().replace(/^\W*/, ""); // use last match and trim it
				gamePass = passwords[n];

				if (gameName !== oldGame) {
					ControlAction.click(6,652,469,120,20);

					break MainLoop;
				}
			}
		}

		break;
	case 4: // Create Game
		break;
	case 5: // Join Game
		D2Bot.updateStatus("Join Game");

		if (gameName !== "") {
			if (joinDelay) {
				delay(joinDelay);
			}

			joinGame(gameName, gamePass);

			lastGameStatus = "pending";

			locationTimeout(createGameTimeout, location);
		}

		break;
	case 6: // Ladder
		break;
	case 7: // Channel List
		break;
	case 8: // Main Menu
		D2Bot.updateStatus("Logging In");
		
		try {
			login(me.profile);
		} catch (e) {
			print(e);
		}
		
		break;
	case 9: // Login
		D2Bot.updateStatus("Logging In");

		try {
			login(me.profile);
		} catch (e) {
			
		}

		break;
	case 10: // Login Error
		var i, 
			string = "",
			text = ControlAction.getText(4, 199, 377, 402, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];
				
				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5207):
				D2Bot.updateStatus("Invalid Password");
				D2Bot.printToConsole("Invalid Password");
				break;
			case getLocaleString(5208):
				D2Bot.updateStatus("Invalid Account");
				D2Bot.printToConsole("Invalid Account");
				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey");

				if (switchKeys) {
					timeoutDelay("Key switch delay", switchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("Disconnected");
				D2Bot.printToConsole("Disconnected");
				ControlAction.click(6, 335, 412, 128, 35);
				break MainSwitch;
			default:
				D2Bot.updateStatus("Login Error");
				D2Bot.printToConsole("Login Error - " + string);
				break;
			}
		}

		ControlAction.click(6, 335, 412, 128, 35);

		while (true) {
			delay(1000);
		}

		break;
	case 11: // Unable To Connect
		D2Bot.updateStatus("Unable To Connect");

		if (ConnectFail) {
			timeoutDelay("Unable to Connect", unableToConnectRetry * 60 * 1000);

			ConnectFail = false;
		}

		if (!ControlAction.click(6,335,450,128,35)) {
			break;
		}

		ConnectFail = true;

		break;
	case 12: // Character Select
		try {
			login(me.profile);
		} catch (e) {

		}

		break;
	case 13: // Realm Down - Character Select screen
		D2Bot.updateStatus("Realm Down");
		delay(1000);

		if (!ControlAction.click(6,33,572,128,35)) {
			break;
		}

		timeoutDelay("Realm Down", realmDownRetry * 6e4);

		if (switchKeys) {
			D2Bot.printToConsole("Realm Down - Changing CD-Key");
			timeoutDelay("Key switch delay", switchKeyDelay * 1000);
			D2Bot.restart(true);
		}

		break;
	case 14: // Character Select / Main Menu - Disconnected
		D2Bot.updateStatus("Disconnected");
		delay(500);
		ControlAction.click(6,351,337,96,32);
		break;
	case 15: // New Character
		break;	
	case 16: // Character Select - Please Wait popup
		if (!locationTimeout(pleaseWaitTimeout, location)) {
			ControlAction.click(6,351,337,96,32);
		}

		break;
	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		ControlAction.click(6,351,337,96,32);
		break;
	case 18: // D2 Splash
		try {
			login(me.profile);
		} catch (e) {
		
		}
		
		break;
	case 19: // Login - Cdkey In Use
		D2Bot.printToConsole("CD-Key in use by " + ControlAction.getText(4,158,310,485,40));

		if (switchKeys) {
			timeoutDelay("Key switch delay", switchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			timeoutDelay("CD-Key in use", cdkeyInUseRetry * 6e4);
			ControlAction.click(6,335,450,128,35);
		}

		break;
	case 20: // Single Player - Select Difficulty
		break;
	case 21: // Main Menu - Connecting
		if (!locationTimeout(connectingToBnetTimeout, location)) {
			ControlAction.click(6,330,416,128,35);
		}

		break;
	case 22: // Login - Invalid Cdkey (classic or xpac)
		if (switchKeys) {
			D2Bot.printToConsole("Invalid CD-Key");
			timeoutDelay("Key switch delay", switchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			timeoutDelay("Invalid CD-Key", cdkeyInUseRetry * 6e4);
		}
		
		break;
	case 23: // Character Select - Connecting
		if (!locationTimeout(characterScreenTimeout, location)) {
			ControlAction.click(6,33,572,128,35);
		}

		break;
	case 24: // Server Down - not much to do but wait..
		break;
	case 25: // Lobby - Please Wait
		if (!locationTimeout(pleaseWaitTimeout, location)) {
			ControlAction.click(6,351,337,96,32);
		}

		break;
	case 26: // Lobby - Game Name Exists
		gameCount += 1;

		delay(500);
		ControlAction.click(6,533,469,120,20);
		break;
	case 27: // Gateway Select
		break;
	case 28: // Lobby - Game Does Not Exist
		D2Bot.updateStatus("Game doesn't exist");

		ControlAction.click(6,533,469,120,20);
		ControlAction.click(6,433,433,96,32);

		inGameAt = rand(gameDoesNotExistdelayMin, gameDoesNotExistdelayMax);

		delay(gameDoesNotExistTimeout ? gameDoesNotExistTimeout : 1);

		break;
	case 38: // Game is full
		D2Bot.updateStatus("Game is full");

		ControlAction.click(6,533,469,120,20);
		ControlAction.click(6,433,433,96,32);

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function timeoutDelay(text, time) {
	var endTime = new Date().getTime() + time;
	
	while (new Date().getTime() < endTime) {
		D2Bot.updateStatus(text + " (" + Math.floor((endTime - new Date().getTime()) / 1000) + "s)");
		delay(500);
	}
}

function locationTimeout(time, location) {
	var endtime = new Date().getTime() + time;

	while (getLocation() === location && endtime > new Date().getTime()) {
		delay(500);
	}

	return (getLocation() !== location);
}

function getRandomString(_length)
{
	var _retString = "";
	var _charSet = "0123456789abcdefghijklmnopqrstuvwxyz";

	while(_length--)
	{
		_retString += _charSet.charAt(rand(0, _charSet.length-1));
		delay(1);
	}

	return _retString;
}