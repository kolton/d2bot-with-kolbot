/*

[Item-parser Syntax Information]

1. [Keyword] separates into two groups
   - [Property Keywords] : [Type], [Name], [Class], [Quality], [Flag], [Level], [Prefix], [Suffix]
   - [Stat Keywords] : [Number or Alias]

2. [Keyword] must be surrounded by '[' and ']'

3. [Property Keywords] must be placed first

4. Insert '#' symbol between [Property Keywords] and [Stat Keywords]

5. Use '+', '-', '*', '/', '(', ')', '&&', '||', '>', '>=', '<', '<=', '==', '!=' symbols for comparison

6. Use '//' symbol for comment

*/

include("NTItemAlias.dbl");

var _NTIP_CheckList = new Array();
var stringArray = [];

function NTIPOpenFile(filepath)
{
	var _nipfile;
	var _line;
	var string;
	var count = 0;

	_nipfile = File.open(filepath, 0);

	if(!_nipfile)
		return false;

	while(!_nipfile.eof)
	{
		string = _nipfile.readLine();
		_line = NTIPParseLineInt(string);
		count += 1;

		if (_line) {
			_NTIP_CheckList.push(_line);
			stringArray.push({string: string, count: count, file: filepath.substring(filepath.lastIndexOf("/") + 1, filepath.length)});
		}
	}

	_nipfile.close();

	return true;
}

function NTIPCheckItem(item, entryList, verbose) {
	var i, list, identified, num,
		result = 0;

	if (!entryList) {
		list = _NTIP_CheckList;
	} else {
		list = entryList;
	}

	identified = item.getFlag(0x10);

	for (i = 0 ; i < list.length ; i++) {
		try {
			if (list[i][0].length > 0) {
				if (eval(list[i][0])) {
					if (list[i][1].length > 0) {
						if (eval(list[i][1])) {
							if (list[i][2] && list[i][2]["MaxQuantity"] && !isNaN(list[i][2]["MaxQuantity"])) {
								num = NTIP_CheckQuantityOwned(list[i][0],list[i][1]);

								if (num < list[i][2]["MaxQuantity"]) {
									result = 1;

									break;
								} else {
									if (item.getParent() && item.getParent().name === me.name && item.mode === 0 && num === list[i][2]["MaxQuantity"]) { // attempt at inv fix for maxquantity
										result = 1;

										break;
									}
								}
							} else {
								result = 1;

								break;
							}
						} else if (!identified && result == 0) {
							result = -1;
						}
					} else {
						if (list[i][2] && list[i][2]["MaxQuantity"] && !isNaN(list[i][2]["MaxQuantity"])) {
							num = NTIP_CheckQuantityOwned(list[i][0], null);

							if (num < list[i][2]["MaxQuantity"]) {
								result = 1;

								break;
							} else {
								if (item.getParent() && item.getParent().name === me.name && item.mode === 0 && num === list[i][2]["MaxQuantity"]) { // attempt at inv fix for maxquantity
									result = 1;

									break;
								}
							}
						} else {
							result = 1;

							break;
						}
					}
				}
			} else if(list[i][1].length > 0) {
				if (eval(list[i][1])) {
					if (list[i][2] && list[i][2]["MaxQuantity"] && !isNaN(list[i][2]["MaxQuantity"])) {
						num = NTIP_CheckQuantityOwned(null, list[i][1]);

						if (num < list[i][2]["MaxQuantity"]) {
							result = 1;

							break;
						} else {
							if (item.getParent() && item.getParent().name === me.name && item.mode === 0 && num === list[i][2]["MaxQuantity"]) { // attempt at inv fix for maxquantity
								result = 1;

								break;
							}
						}
					} else {
						result = 1;

						break;
					}
				} else if (!identified && result == 0) {
					result = -1;
				}
			}
		} catch (pickError) {
			showConsole();

			if (!entryList) {
				print("ÿc1Pickit error! Line # ÿc2" + stringArray[i].count + " ÿc1Entry: ÿc0" + stringArray[i].string + " (" + stringArray[i].file + ")");

				_NTIP_CheckList[i] = ["", "", ""]; // make the bad entry blank
			} else {
				print("ÿc1Pickit error in runeword config!");
			}

			result = 0;
		}
	}

	if (verbose) {
		if (result > 0) {
			return {line: stringArray[i].file + " #" + stringArray[i].count, result: result};
		} else {
			return {line: null, result: result};
		}
	}

	return result;
}

// Internal function
function NTIP_CheckQuantityOwned(item_type, item_stats) {
	var i, item,
		num = 0,
		items = me.getItems();

	if (!items) {
		print("I can't find my items!");

		return 0;
	}

	for (i = 0; i < items.length; i += 1) {
		if (items[i].mode === 0 && items[i].location === 7) {
			item = items[i];

			if ((item_type != null && item_type.length > 0 && eval(item_type)) || item_type === null) {
				if ((item_stats != null && item_stats.length > 0 && eval(item_stats)) || item_stats === null) {
					num += 1;
				}
			}
		}

		// inv check
		else if (items[i].mode === 0 && items[i].location === 3) {
			item = items[i];

			if ((item_type != null && item_type.length > 0 && eval(item_type)) || item_type === null) {
				if ((item_stats != null && item_stats.length > 0 && eval(item_stats)) || item_stats === null) {
					if (Config.Inventory[items[i].y][items[i].x] > 0) { // we check only space that is supposed to be free
						num += 1;
					}
				}
			}
		}
	}

	//print("I have "+num+" of these.");

	return num;
}

function NTIPParseLineInt(input)
{
	var i, property;
	var _start, _end;
	var _section, _keyword;
	var _result;

	_end = input.indexOf("//");

	if(_end != -1)
		input = input.substring(0, _end);

	input = input.replace(/ |;|\t/g, "").toLowerCase();

	if(input.length < 5)
		return null;

	_result = input.split("#");

	if(_result[0] && _result[0].length > 4)
	{
		_section = _result[0].split("[");

		_result[0] = _section[0];

		for(i = 1 ; i < _section.length ; i++)
		{
			_end = _section[i].indexOf("]") + 1;
			property = _section[i].substring(0, _end - 1);

			switch (property) {
			case 'color':
				_result[0] += "item.getColor()";

				break;
			case 'type':
				_result[0] += "item.itemType";

				break;
			case 'name':
				_result[0] += "item.classid";

				break;
			case 'class':
				_result[0] += "item.itemclass";

				break;
			case 'quality':
				_result[0] += "item.quality";

				break;
			case 'flag':
				if(_section[i][_end] == '!')
					_result[0] += "!item.getFlag(";
				else
					_result[0] += "item.getFlag(";

				_end += 2;

				break;
			case 'level':
				_result[0] += "item.ilvl";

				break;
			case 'prefix':
				//_result[0] += "item.prefixnum";
				if(_section[i][_end] == '!')
					_result[0] += "!item.getPrefix(";
				else
					_result[0] += "item.getPrefix(";

				_end += 2;

				break;
			case 'suffix':
				//_result[0] += "item.suffixnum";
				if(_section[i][_end] == '!')
					_result[0] += "!item.getSuffix(";
				else
					_result[0] += "item.getSuffix(";

				_end += 2;

				break;
			default:
				print("Unknown Keyword : " + input);

				break;
			}

			for(_start = _end ; _end < _section[i].length ; _end++)
			{
				if(!NTIPIsSyntaxInt(_section[i][_end]))
					break;
			}

			_result[0] += _section[i].substring(_start, _end);

			for(_start = _end ; _end < _section[i].length ; _end++)
			{
				if(NTIPIsSyntaxInt(_section[i][_end]))
					break;
			}

			_keyword = _section[i].substring(_start, _end);
			
			if (isNaN(_keyword)) {
				switch (property) {
				case 'color':
					if (typeof _NTIPAliasColor[_keyword] === "undefined") {
						print("Unknown color: " + _keyword);
						_result[0] += "false";
					} else {
						_result[0] += _NTIPAliasColor[_keyword];
					}

					break;
				case 'type':
					if (typeof _NTIPAliasType[_keyword] === "undefined") {
						print("Unknown type: " + _keyword);
						_result[0] += "false";
					} else {
						_result[0] += _NTIPAliasType[_keyword];
					}

					break;
				case 'name':
					if (typeof _NTIPAliasClassID[_keyword] === "undefined") {
						print("Unknown name: " + _keyword);
						_result[0] += "false";
					} else {
						_result[0] += _NTIPAliasClassID[_keyword];
					}

					break;
				case 'class':
					if (typeof _NTIPAliasClass[_keyword] === "undefined") {
						print("Unknown class: " + _keyword);
						_result[0] += "false";
					} else {
						_result[0] += _NTIPAliasClass[_keyword];
					}

					break;
				case 'quality':
					if (typeof _NTIPAliasQuality[_keyword] === "undefined") {
						print("Unknown quality: " + _keyword);
						_result[0] += "false";
					} else {
						_result[0] += _NTIPAliasQuality[_keyword];
					}

					break;
				case 'flag':
					if (typeof _NTIPAliasFlag[_keyword] === "undefined") {
						print("Unknown flag: " + _keyword);
						_result[0] += "false)";
					} else {
						_result[0] += _NTIPAliasFlag[_keyword] + ")";
					}

					break;
				}
			} else {
				if (property == 'flag' || property == 'prefix' || property == 'suffix') {
					_result[0] += _keyword + ")";
				} else {
					_result[0] += _keyword;
				}
			}

			_result[0] += _section[i].substring(_end);
		}
	}
	else
		_result[0] = "";

	if(_result[1] && _result[1].length > 4)
	{
		_section = _result[1].split("[");
		_result[1] = _section[0];

		for(i = 1 ; i < _section.length ; i++)
		{
			_end = _section[i].indexOf("]");
			_keyword = _section[i].substring(0, _end);

			if (isNaN(_keyword)) {
				if (typeof _NTIPAliasStat[_keyword] === "undefined") {
					print("Unknown stat: " + _keyword);
					_result[1] += "false";
				} else {
					_result[1] += "item.getStat(" + _NTIPAliasStat[_keyword] + ")";
				}
			} else {
				_result[1] += "item.getStat(" + _keyword + ")";
			}

			_result[1] += _section[i].substring(_end+1);
		}
	}
	else
		_result[1] = "";

	if(_result[2] && _result[2].replace(/^\s+|\s+$/, "").length > 0)
	{
		_section = _result[2].split("[");
		_result[2] = new Array();

		for(i = 1 ; i < _section.length ; i++)
		{
			_end = _section[i].indexOf("]");

			_keyword = _section[i].substring(0, _end);

			if(_keyword.toLowerCase().replace(/^\s+|\s+$/, "") == "maxquantity")
			{
				_end = _section[i].split("==")[1].replace(/^\s+|\s+$/, "").indexOf("//");
				if(_end == -1)
					_end = _section[i].split("==")[1].replace(/^\s+|\s+$/, "").length;
				var _quantity = parseInt(_section[i].split("==")[1].replace(/^\s+|\s+$/, "").substring(0, _end));
				_result[2]["MaxQuantity"] = _quantity;
			}
			else
			{
				print("Error in your NIP file : unknown 3rd part keyword.");
			}
		}
	}

	return _result;
}

function NTIPIsSyntaxInt(ch)
{
	return (ch == '!' || ch == '%' || ch == '&' || (ch >= '(' && ch <= '+') || ch == '-' || ch == '/' || (ch >= ':' && ch <= '?') || ch == '|');
}